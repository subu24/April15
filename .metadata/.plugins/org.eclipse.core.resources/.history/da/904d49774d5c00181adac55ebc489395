package com;

class Node{
	int data;
	Node next;
	
	Node(int data){
		this.data=data;
		next=null;
	}
}


public class LinkedList {
	
	 Node head;
	
	 Node detectLoop(){
		
		Node slow=head;
		Node fast=head;
		boolean loop=false;
		while(fast!=null && fast.next!=null){
			fast=fast.next.next;
			slow=slow.next;
			if(fast==slow){
				loop=true;
				break;
			}	
		}
		
		if(loop){
			slow=head;
			while(fast!=slow){
				fast=fast.next;
				slow=slow.next;
			}
			return fast;
		}else
		
		return null;
	}
	 
	 Node ReverseList(){
		 
		 Node current=head;
		 Node prev=null;
		 while(current!=null){
			 Node next=current.next;
			 current.next=prev;
			 prev=current;
			 current=next;
		 }
		 return prev;
	 }
	 
	
	 Node RecReverseList(Node curr,Node prev){
		 
		 if(curr.next==null){
			 head=curr;
			 curr.next=prev;
			 return null;
		 }
			Node next1=curr.next;
			curr.next=prev;
			prev=RecReverseList(next1,curr);
		 return head;
	 }
	 
	 
	 Node NthNodeFromLast(Node node,int nthNode){
		Node first=node;
		Node second=node;
		int count=0;
		while(first!=null) {
			count++;
			first=first.next;
			if(count==nthNode)
				break;
		}
		if(count<nthNode)
			return null;
		while(first!=null){
			first=first.next;
			second=second.next;
		}
		 return second;
	 }
	 
/*	 Node left;
	 boolean recPalindrom(Node root){
		 
		 if(root.next==null)
			 return ;
		 
			Node right= recPalindrom(root.next);
			if(left==right)
				left=left.next; 
			return null;
	 }*/
	 
	 void push(int data){
		 Node node=new Node(data);
		 node.next=head;
		 head=node;
	 }
	void display(Node node){
		while(node!=null){
			System.out.println(node.data);
			node=node.next;
		}
	}

	public static void main(String[] args) {

		LinkedList list=new LinkedList();
		list.push(20);
		list.push(4);
		list.push(15);
		list.push(10);
		list.push(50);
		//list.head.next.next.next=list.head.next;
		list.display(list.head);
		Node node=list.NthNodeFromLast(list.head,2);
		if(node!=null)
		System.out.println(node.data);	   // list.display(node);
		else
			System.out.println("None");
	}

}
