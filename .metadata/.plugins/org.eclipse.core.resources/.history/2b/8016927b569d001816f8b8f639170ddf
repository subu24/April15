package com.he.shoppingCart;

import java.util.HashMap;
import java.util.Map;


public class Inventory {
	Map<Product, Integer> itemOnInv=null;
	
	private Inventory() {
		itemOnInv=new HashMap<Product, Integer>();
	}
	public static volatile Inventory instance;
	
	public static Inventory getInstance() {
		if(instance==null){
			synchronized (Inventory.class) {
				if(instance==null){
					instance=new Inventory();
				}
			}
		}
		return instance;
	}
	
	public void addItems(Map<Product, Integer> items)  {
		for(Map.Entry<Product, Integer> entry: items.entrySet()){
			if(entry.getValue()>0){
			if(itemOnInv.containsKey(entry.getKey())){
				itemOnInv.put(entry.getKey(), entry.getValue());
			}else
			{
				itemOnInv.put(entry.getKey(),itemOnInv.get(entry.getKey())+entry.getValue());	
			}
			}else{
				throw new IllegalArgumentException("Must be a non-negative integer");
			}
		}
		
	}
	
	public void removeItems(Map<Product, Integer> items) {
		
		
	}
	
	public Integer getAvailableAmount(Product product) {
		return itemOnInv.get(product);
	}
	
	
	
}
